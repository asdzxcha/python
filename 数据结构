class Stack:  #栈
    def __init__(self):
        self.items=[]
    def isEmpty(self):
        return self.items==[]
    def push(self,item):
        self.items.append(item)
    def pop(self):
        return self.items.pop()
    def peek(self):
        return self.items[-1]
    def size(self):
        return len(self.item)

class Queue:  #队列
    def __init__(self):
        self.items=[]
    def isEmpty(self):
        return self.items==[]
    def enqueue(self,item):
        self.items.insert(0,item) 
    def dequeue(self):
        return self.items.pop()
    def size(self):
        return len(self.items)

class Deque:  #双端队列
    def __init__(self):
        self.items=[]
    def addFront(self,item):
        self.items.append(item)
    def addRear(self,item):
        self.items.insert(0,item)
    def remove(self):
        return self.items.pop()
    def removeRear(self):
        return self.items.pop(0)
    def isEmpty(self):
        if self.items==[]:
            return True
        else:
            return False
    def size(self):
        return len(self.items)

class List():   #列表
    def __init__(self):
        self.items=[]
    def add(self,item):
        self.items.append(item)
    def remove(self,item):
        self.items.remove(item)
    def search(self,item):
        for i in self.items:
            if item in self.items:
                return True
            else:
                return False
    def isEmpty(self):
        if self.items=='':
            return True
        else:
            return False
    def size(self):
        return len(self.items)
        
        class Node():   #节点
    def __init__(self,initdata):
        self.data=initdata
        self.next=None
        
    def getData(self):
        return self.data
    
    def getNext(self):
        return self.next
    
    def setData(self,newdata):
        self.data=newdata
        
    def setNext(self,newnext):
        self.next=newnext
