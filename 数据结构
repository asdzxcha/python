class Stack:  #栈
    def __init__(self):
        self.items=[]
    def isEmpty(self):
        return self.items==[]
    def push(self,item):
        self.items.append(item)
    def pop(self):
        return self.items.pop()
    def peek(self):
        return self.items[-1]
    def size(self):
        return len(self.item)

class Queue:  #队列
    def __init__(self):
        self.items=[]
    def isEmpty(self):
        return self.items==[]
    def enqueue(self,item):
        self.items.insert(0,item) 
    def dequeue(self):
        return self.items.pop()
    def size(self):
        return len(self.items)

class Deque:  #双端队列
    def __init__(self):
        self.items=[]
    def addFront(self,item):
        self.items.append(item)
    def addRear(self,item):
        self.items.insert(0,item)
    def remove(self):
        return self.items.pop()
    def removeRear(self):
        return self.items.pop(0)
    def isEmpty(self):
        if self.items==[]:
            return True
        else:
            return False
    def size(self):
        return len(self.items)

class List():   #列表
    def __init__(self):
        self.items=[]
    def add(self,item):
        self.items.append(item)
    def remove(self,item):
        self.items.remove(item)
    def search(self,item):
        for i in self.items:
            if item in self.items:
                return True
            else:
                return False
    def isEmpty(self):
        if self.items=='':
            return True
        else:
            return False
    def size(self):
        return len(self.items)

class Node():   #节点
    def __init__(self,initdata):
        self.data=initdata
        self.next=None
        
    def getData(self):
        return self.data
    
    def getNext(self):
        return self.next
    
    def setData(self,newdata):
        self.data=newdata
        
    def setNext(self,newnext):
        self.next=newnext

class Unorderedlist():  #无序表
    def __init__(self):
        self.head=None
        
    def isEmpty(self):
        if self.head==None:
            return True
        else:
            return False
         
    def add(self,item): 
        temp=Node(item)
        temp.setNext(self.head)
        self.head=temp
        
    def size(self):
        current=self.head
        count=0
        while current !=None:
            count=count+1
            current=current.getNext()        
        return count
        
    def search(self,item):
        current=self.head
        found=False
        while current!=None and not found:
            if current.getData()==item:
                found=True
            else:
                current=current.getNext()
        return found
    
    def remove(self,item):
        current=self.head
        previous=None  #前一个节点
        found=False
        while not found:
            if current.getData()==item:
                found=True
            else:
                previous=current
                current=current.getNext()
            if previous==None:
                self.head=current.getNext()
            else:
                previous.setNext(current.getNext())
                
class OrderedList:  #有序表
    def __init__(self):
        self.head=None
    
    def isEmpty(self):
        if self.head==None:
            return True
        else:
            return False
         
    def add(self,item): 
        current=self.head
        previous=None
        while current!=None:
            if current.getData()>item:
                break
            else:
                previous=current
                current=current.getData()
        temp=Node(item)
        if previous==None:
            temp.setData(self.head)
            self.head=temp
        else:
            temp.setNext(current)
            previous.setNext(temp)
            
    def size(self):
        current=self.head
        count=0
        while current !=None:
            count=count+1
            current=current.getNext()        
        return count
        
    def search(self,item):
        current=self.head
        found=False
        stop=False
        while current!=None and not found and not stop:
            if current.getData()==item:
                found=True
            else:
                if current.getData()>item:
                    stop=True
                else:
                    current=current.gatNext()
        return found
    
    def remove(self,item):
        current=self.head
        previous=None  #前一个节点
        found=False
        while not found:
            if current.getData()==item:
                found=True
            else:
                previous=current
                current=current.getNext()
            if previous==None:
                self.head=current.getNext()
            else:
                previous.setNext(current.getNext())
                
u=Unorderedlist()
u.add(54)
print(u.search(5))
